#!/usr/bin/perl 
# For every data file that exists in the munin-collector data directory (DataDir configuration
# option), there should be a sysmbolic link to a corresponding plugin configuration file within
# the munin-collector plugin directory (PluginsDir configuration option). This utility attempts
# to match data files with existing plugin configuration files and recreate any missing symbolic
# links. 
	$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin';

    # Read the n-collector configuration file.
    if (defined($ENV{'MUNIN_COLLECTOR_CONF'})) {
        $ConfigurationFile = $ENV{'MUNIN_COLLECTOR_CONF'};
        }
    else {
        $ConfigurationFile = '/usr/local/etc/munin-collector.conf';
        }

    if (! -e $ConfigurationFile) {
        print "Configuration file '$ConfigurationFile' does not exist.\n";
        exit;
    }

    @config = `cat $ConfigurationFile`;
    foreach $statement (@config) {
        chop($statement);
        next if $statement eq '' || substr($statement,0,1) eq '#';
        if ($statement =~ /=/) {
            ($key, $value) = split('=', $statement, 2);
            $key = sprintf('\%%\(%s\)s', $key);
            $value =~ s/^\s+//; $value =~ s/\s+$//;
            $ConfigVar{$key} = $value;
        } elsif ($statement =~ /:/) {
            ($key, $value) = split(':', $statement, 2);
            $value =~ s/^\s+//; $value =~ s/\s+$//;
            $Config{$key} = $value;
        }
    }

    foreach $opt_key (keys(%Config)) {
        foreach $var_key (keys(%ConfigVar)) {
            $Config{$opt_key} =~ s/$var_key/$ConfigVar{$var_key}/g;
        }
    }

    # Build config files cross-reference.
    @x = `ls $Config{'PluginDir'}/config`;
    foreach $x (@x) {
        chop($x);
        @y = `cat $Config{'PluginDir'}/config/$x`;
        foreach $y (@y) {
            @z = split(/[\s\t\n]+/, $y);
            if ($z[0] eq 'pluginname') {
                $plugin_name = $z[1];
                $Plugin{$plugin_name} = $x;
            } elsif ($z[0] eq 'multigraph') {
                $multigraph_name = $z[1];
                $Multigraph{$multigraph_name} = $plugin_name;
            }
        }
    }

    $PluginIndex = ' '.join(' ', keys(%Plugin)).' ';
    $MultigraphIndex = ' '.join(' ', keys(%Multigraph)).' ';

    # Create symbolic links for each .rrd data and config file.
    @x = `ls $Config{'DataDir'}`;
    foreach $x (@x) {
        chop($x);
        @y = split(/-/, $x);

        $needle = ' '.$y[1].' ';
        if (exists($Plugin{$y[1]})) {
            $plugin_name = $y[1];
            $multigraph_name = $plugin_name;
        } elsif (exists($Multigraph{$y[1]})) {
            $multigraph_name = $y[1];
            $plugin_name = $Multigraph{$multigraph_name};
        } else {
            print "No configuration exists for: $x\n";
            next;
        }

        $dir = "$Config{'PluginDir'}/links/$y[0]";
        $link = "$Config{'PluginDir'}/links/$y[0]/$plugin_name";
        $target = "$Config{'PluginDir'}/config/$Plugin{$plugin_name}";

        if (! -e $dir) {
            System("mkdir -p $dir");
        }

        if (! -e $link) {
            System("ln -s $target $link");
        }
    }

#
#   Print and issue link commands.
#
sub System() {
    my $cmd = shift();
    print "$cmd\n";
    system("$cmd");
}

